{
    "rules": [
      {
        "id": "1",
        "name": "Todos los atributos de las entidades son objetos",
        "description": "Esta regla asegura que todas las entidades sean objetos para permitir una mayor flexibilidad y escalabilidad en el código. Evita el uso de tipos primitivos que pueden limitar la funcionalidad.",
        "example": "@Entity<br> public class Usuario { <br>&nbsp;&nbsp;&nbsp;&nbsp;private Long id; <br>&nbsp;&nbsp;&nbsp;&nbsp;private String nombre; <br>}",
        "category": "Capa de persistencia",
        "severity": "Grave"
      },
      {
        "id": "2",
        "name": "Todas las entidades tienen la anotación <i>@Data</i>",
        "description": "La anotación <i>@Data</i> de Lombok genera automáticamente getters, setters, equals, hashCode y toString. Esto ayuda a reducir el boilerplate en las entidades.",
        "example": "@Data <br>@Entity <br>public class Usuario { <br>&nbsp;&nbsp;&nbsp;&nbsp; private Long id; <br>&nbsp;&nbsp;&nbsp;&nbsp; private String nombre; <br>}",
        "category": "Capa de persistencia",
        "severity": "Moderado"
      },
      {
        "id": "3",
        "name": "Todas las clases de lógica tienen la anotación <i>@Service</i>",
        "description": "La anotación <i>@Service</i> se utiliza en la capa de servicio donde se escribe la lógica de negocio. Esto ayuda a la inyección de dependencias y a la transaccionalidad.",
        "example": "@Service<br> public class UsuarioService { <br>&nbsp;&nbsp;&nbsp;&nbsp;...<br> }",
        "category": "Capa de lógica",
        "severity": "Moderado"
      },
      {
        "id": "4",
        "name": "Todos los atributos de las clases de lógica tienen la anotación <i>@Autowired</i>",
        "description": "La anotación <i>@Autowired</i> se utiliza para la inyección automática de dependencias. Esto asegura que las clases estén correctamente ensambladas con sus dependencias.",
        "example": "@Service<br> public class UsuarioService { <br>&nbsp;&nbsp;&nbsp;&nbsp; @Autowired <br>&nbsp;&nbsp;&nbsp;&nbsp; private UsuarioRepository usuarioRepository;<br> &nbsp;&nbsp;&nbsp;&nbsp;... <br>}",
        "category": "Capa de lógica",
        "severity": "Leve"
      },
      {
        "id": "5",
        "name": "Todas las clases de controladores tienen la anotación <i>@Controller</i>",
        "description": "La anotación <i>@Controller</i> se utiliza en las clases que actúan como controlador en el patrón MVC. Esto permite que Spring reconozca la clase como parte de la capa de controladores.",
        "example": "@Controller<br> public class UsuarioController { <br>&nbsp;&nbsp;&nbsp;&nbsp;...<br> }",
        "category": "Capa de controladores",
        "severity": "Moderado"
      },
      {
        "id": "6",
        "name": "Todas las clases de controladores tienen la anotación <i>@RequestMapping</i>",
        "description": "La anotación <i>@RequestMapping</i> se utiliza para mapear las solicitudes web a métodos de manejo de controladores. Esto proporciona un mapeo fácil de las URL a los métodos de controlador.",
        "example": "@Controller<br> @RequestMapping(\"/usuarios\")<br> public class UsuarioController {<br> &nbsp;&nbsp;&nbsp;&nbsp;... <br>}",
        "category": "Capa de controladores",
        "severity": "Moderado"
      },
      {
        "id": "7",
        "name": "Todos los atributos de las clases de controladores tienen la anotación <i>@Autowired</i>",
        "description": "La anotación <i>@Autowired</i> se utiliza para la inyección automática de dependencias en la capa de controladores. Esto asegura que las clases estén correctamente ensambladas con sus dependencias.",
        "example": "@Controller<br> public class UsuarioController { <br>&nbsp;&nbsp;&nbsp;&nbsp; @Autowired <br>&nbsp;&nbsp;&nbsp;&nbsp; private UsuarioService usuarioService; <br>&nbsp;&nbsp;&nbsp;&nbsp;...<br> }",
        "category": "Capa de controladores",
        "severity": "Leve"
      },
      {
        "id": "8",
        "name": "Todas las clases DTO y DetailDTO tienen la anotación <i>@Data</i>",
        "description": "La anotación <i>@Data</i> se utiliza en las clases DTO para generar automáticamente getters, setters, equals, hashCode y toString. Esto ayuda a reducir el boilerplate en las clases DTO.",
        "example": "@Data<br> public class UsuarioDTO { <br>&nbsp;&nbsp;&nbsp;&nbsp; private Long id; <br>&nbsp;&nbsp;&nbsp;&nbsp; private String nombre; <br>}",
        "category": "Capa de persistencia",
        "severity": "Moderado"
      },
      {
        "id": "9",
        "name": "Todos los atributos de la clase son serializables",
        "description": "Esta regla asegura que todas las clases sean serializables para permitir la transferencia de objetos a través de la red o el almacenamiento en archivos. Esto es útil para la persistencia y la comunicación entre sistemas.",
        "example": "public class Usuario { <br>&nbsp;&nbsp;&nbsp;&nbsp; private Long id; <br>&nbsp;&nbsp;&nbsp;&nbsp; private String nombre; <br>}",
        "category": "Capa de persistencia",
        "severity": "Leve"
      },
      {
        "id": "10",
        "name": "Todos los métodos de tipo GET deben retornar atributos de tipo DetailDTO",
        "description": "Esta regla asegura que los métodos de tipo GET retornen atributos de tipo DetailDTO para evitar la exposición de información sensible o redundante. Esto ayuda a mantener una arquitectura limpia y coherente.",
        "example": "@GetMapping(\"/usuarios/{id}\")<br> public DetailDTO getUsuario(@PathVariable Long id) { <br>&nbsp;&nbsp;&nbsp;&nbsp; Usuario usuario = usuarioService.findById(id); <br>&nbsp;&nbsp;&nbsp;&nbsp; return new DetailDTO(usuario); <br>}",
        "category": "Capa de controladores",
        "severity": "Moderado"
      }
    ]  
  }